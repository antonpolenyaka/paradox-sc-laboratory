/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Utilities {
  export type StakeStruct = {
    stakeId: PromiseOrValue<BigNumberish>;
    stakedParas: PromiseOrValue<BigNumberish>;
    stakeShares: PromiseOrValue<BigNumberish>;
    pooledDay: PromiseOrValue<BigNumberish>;
    stakedDays: PromiseOrValue<BigNumberish>;
  };

  export type StakeStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    stakeId: BigNumber;
    stakedParas: BigNumber;
    stakeShares: BigNumber;
    pooledDay: BigNumber;
    stakedDays: BigNumber;
  };

  export type UserPositionStruct = {
    totalAmount: PromiseOrValue<BigNumberish>;
    rewardDebt: PromiseOrValue<BigNumberish>;
    lastStakeId: PromiseOrValue<BigNumberish>;
    stakeSharesTotal: PromiseOrValue<BigNumberish>;
    stakes: Utilities.StakeStruct[];
  };

  export type UserPositionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    Utilities.StakeStructOutput[]
  ] & {
    totalAmount: BigNumber;
    rewardDebt: BigNumber;
    lastStakeId: BigNumber;
    stakeSharesTotal: BigNumber;
    stakes: Utilities.StakeStructOutput[];
  };
}

export interface StakePoolInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "burnFee()": FunctionFragment;
    "burnFeeEnabled()": FunctionFragment;
    "calcPayoutRewards(uint256,uint256,uint256,uint256)": FunctionFragment;
    "dailyData(uint256)": FunctionFragment;
    "endStake(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getStakeRewards(address,uint256)": FunctionFragment;
    "getUserPosition(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardFee()": FunctionFragment;
    "rewardFeeEnabled()": FunctionFragment;
    "setBurnEnabled(bool)": FunctionFragment;
    "setBurnFee(uint256)": FunctionFragment;
    "setRewardEnabled(bool)": FunctionFragment;
    "setRewardFee(uint256)": FunctionFragment;
    "stake(uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "userPositions(address)": FunctionFragment;
    "virtualPool()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "burnFee"
      | "burnFeeEnabled"
      | "calcPayoutRewards"
      | "dailyData"
      | "endStake"
      | "getRoleAdmin"
      | "getStakeRewards"
      | "getUserPosition"
      | "grantRole"
      | "hasRole"
      | "renounceRole"
      | "revokeRole"
      | "rewardFee"
      | "rewardFeeEnabled"
      | "setBurnEnabled"
      | "setBurnFee"
      | "setRewardEnabled"
      | "setRewardFee"
      | "stake"
      | "supportsInterface"
      | "userPositions"
      | "virtualPool"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "burnFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnFeeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcPayoutRewards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "endStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPosition",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "rewardFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardFeeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBurnEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBurnFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "userPositions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "virtualPool",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnFeeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPayoutRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dailyData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardFeeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBurnEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBurnFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "virtualPool",
    data: BytesLike
  ): Result;

  events: {
    "EndStake(uint256,address,uint256,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "StartStake(uint256,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EndStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartStake"): EventFragment;
}

export interface EndStakeEventObject {
  timestamp: BigNumber;
  stakerAddr: string;
  stakeId: BigNumber;
  payout: BigNumber;
  servedDays: BigNumber;
}
export type EndStakeEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  EndStakeEventObject
>;

export type EndStakeEventFilter = TypedEventFilter<EndStakeEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StartStakeEventObject {
  timestamp: BigNumber;
  stakerAddr: string;
  stakeId: BigNumber;
  stakedParas: BigNumber;
  stakedDays: BigNumber;
}
export type StartStakeEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  StartStakeEventObject
>;

export type StartStakeEventFilter = TypedEventFilter<StartStakeEvent>;

export interface StakePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    burnFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    burnFeeEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    calcPayoutRewards(
      stakeShares: PromiseOrValue<BigNumberish>,
      beginDay: PromiseOrValue<BigNumberish>,
      endDay: PromiseOrValue<BigNumberish>,
      stakedDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { payout: BigNumber }>;

    dailyData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        dayPayoutTotal: BigNumber;
        dayStakeSharesTotal: BigNumber;
      }
    >;

    endStake(
      stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStakeRewards(
      _usr: PromiseOrValue<string>,
      _stkIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { stakeReturn: BigNumber; payout: BigNumber }
    >;

    getUserPosition(
      _usr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Utilities.UserPositionStructOutput]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardFeeEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    setBurnEnabled(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBurnFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardEnabled(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      newStakedParas: PromiseOrValue<BigNumberish>,
      newStakedDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userPositions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        rewardDebt: BigNumber;
        lastStakeId: BigNumber;
        stakeSharesTotal: BigNumber;
      }
    >;

    virtualPool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalPooled: BigNumber;
        rewardsPerSecond: BigNumber;
        accParaPerShare: BigNumber;
        lastRewardTime: BigNumber;
      }
    >;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  burnFee(overrides?: CallOverrides): Promise<BigNumber>;

  burnFeeEnabled(overrides?: CallOverrides): Promise<boolean>;

  calcPayoutRewards(
    stakeShares: PromiseOrValue<BigNumberish>,
    beginDay: PromiseOrValue<BigNumberish>,
    endDay: PromiseOrValue<BigNumberish>,
    stakedDays: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dailyData(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      dayPayoutTotal: BigNumber;
      dayStakeSharesTotal: BigNumber;
    }
  >;

  endStake(
    stakeIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getStakeRewards(
    _usr: PromiseOrValue<string>,
    _stkIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { stakeReturn: BigNumber; payout: BigNumber }
  >;

  getUserPosition(
    _usr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Utilities.UserPositionStructOutput>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardFee(overrides?: CallOverrides): Promise<BigNumber>;

  rewardFeeEnabled(overrides?: CallOverrides): Promise<boolean>;

  setBurnEnabled(
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBurnFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardEnabled(
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    newStakedParas: PromiseOrValue<BigNumberish>,
    newStakedDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userPositions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalAmount: BigNumber;
      rewardDebt: BigNumber;
      lastStakeId: BigNumber;
      stakeSharesTotal: BigNumber;
    }
  >;

  virtualPool(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalPooled: BigNumber;
      rewardsPerSecond: BigNumber;
      accParaPerShare: BigNumber;
      lastRewardTime: BigNumber;
    }
  >;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    burnFee(overrides?: CallOverrides): Promise<BigNumber>;

    burnFeeEnabled(overrides?: CallOverrides): Promise<boolean>;

    calcPayoutRewards(
      stakeShares: PromiseOrValue<BigNumberish>,
      beginDay: PromiseOrValue<BigNumberish>,
      endDay: PromiseOrValue<BigNumberish>,
      stakedDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        dayPayoutTotal: BigNumber;
        dayStakeSharesTotal: BigNumber;
      }
    >;

    endStake(
      stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getStakeRewards(
      _usr: PromiseOrValue<string>,
      _stkIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { stakeReturn: BigNumber; payout: BigNumber }
    >;

    getUserPosition(
      _usr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Utilities.UserPositionStructOutput>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardFee(overrides?: CallOverrides): Promise<BigNumber>;

    rewardFeeEnabled(overrides?: CallOverrides): Promise<boolean>;

    setBurnEnabled(
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBurnFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardEnabled(
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      newStakedParas: PromiseOrValue<BigNumberish>,
      newStakedDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userPositions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        rewardDebt: BigNumber;
        lastStakeId: BigNumber;
        stakeSharesTotal: BigNumber;
      }
    >;

    virtualPool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalPooled: BigNumber;
        rewardsPerSecond: BigNumber;
        accParaPerShare: BigNumber;
        lastRewardTime: BigNumber;
      }
    >;
  };

  filters: {
    "EndStake(uint256,address,uint256,uint256,uint256)"(
      timestamp?: null,
      stakerAddr?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      payout?: null,
      servedDays?: null
    ): EndStakeEventFilter;
    EndStake(
      timestamp?: null,
      stakerAddr?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      payout?: null,
      servedDays?: null
    ): EndStakeEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "StartStake(uint256,address,uint256,uint256,uint256)"(
      timestamp?: null,
      stakerAddr?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      stakedParas?: null,
      stakedDays?: null
    ): StartStakeEventFilter;
    StartStake(
      timestamp?: null,
      stakerAddr?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      stakedParas?: null,
      stakedDays?: null
    ): StartStakeEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    burnFee(overrides?: CallOverrides): Promise<BigNumber>;

    burnFeeEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    calcPayoutRewards(
      stakeShares: PromiseOrValue<BigNumberish>,
      beginDay: PromiseOrValue<BigNumberish>,
      endDay: PromiseOrValue<BigNumberish>,
      stakedDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endStake(
      stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeRewards(
      _usr: PromiseOrValue<string>,
      _stkIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPosition(
      _usr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardFee(overrides?: CallOverrides): Promise<BigNumber>;

    rewardFeeEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    setBurnEnabled(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBurnFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardEnabled(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      newStakedParas: PromiseOrValue<BigNumberish>,
      newStakedDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPositions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    virtualPool(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnFeeEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcPayoutRewards(
      stakeShares: PromiseOrValue<BigNumberish>,
      beginDay: PromiseOrValue<BigNumberish>,
      endDay: PromiseOrValue<BigNumberish>,
      stakedDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dailyData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endStake(
      stakeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeRewards(
      _usr: PromiseOrValue<string>,
      _stkIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPosition(
      _usr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardFeeEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBurnEnabled(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBurnFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardEnabled(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      newStakedParas: PromiseOrValue<BigNumberish>,
      newStakedDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userPositions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    virtualPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
