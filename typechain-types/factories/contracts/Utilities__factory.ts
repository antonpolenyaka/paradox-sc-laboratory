/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Utilities, UtilitiesInterface } from "../../contracts/Utilities";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "stakerAddr",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "stakeId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "payout",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "servedDays",
        type: "uint256",
      },
    ],
    name: "EndStake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "previousAdminRole",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "newAdminRole",
        type: "bytes32",
      },
    ],
    name: "RoleAdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "RoleGranted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "RoleRevoked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "stakerAddr",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "stakeId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stakedParas",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stakedDays",
        type: "uint256",
      },
    ],
    name: "StartStake",
    type: "event",
  },
  {
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "burnFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "burnFeeEnabled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "dailyData",
    outputs: [
      {
        internalType: "uint80",
        name: "dayPayoutTotal",
        type: "uint80",
      },
      {
        internalType: "uint80",
        name: "dayStakeSharesTotal",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32",
      },
    ],
    name: "getRoleAdmin",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "hasRole",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardFeeEnabled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userPositions",
    outputs: [
      {
        internalType: "uint256",
        name: "totalAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardDebt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastStakeId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stakeSharesTotal",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "virtualPool",
    outputs: [
      {
        internalType: "uint256",
        name: "totalPooled",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardsPerSecond",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "accParaPerShare",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastRewardTime",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061121a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638b4242671161008c578063a217fddf11610066578063a217fddf14610278578063b938230d14610296578063d547741f146102b4578063fce589d8146102d0576100ea565b80638b424267146101f957806390de68711461021757806391d1485414610248576100ea565b8063303cc0c9116100c8578063303cc0c91461016b57806336568abe146101895780634ad14583146101a5578063613cf420146101c6576100ea565b806301ffc9a7146100ef578063248a9ca31461011f5780632f2ff15d1461014f575b600080fd5b61010960048036038101906101049190610b1f565b6102ee565b6040516101169190610b67565b60405180910390f35b61013960048036038101906101349190610bb8565b610368565b6040516101469190610bf4565b60405180910390f35b61016960048036038101906101649190610c6d565b610387565b005b6101736103a8565b6040516101809190610b67565b60405180910390f35b6101a3600480360381019061019e9190610c6d565b6103bb565b005b6101ad61043e565b6040516101bd9493929190610cc6565b60405180910390f35b6101e060048036038101906101db9190610d0b565b61045c565b6040516101f09493929190610cc6565b60405180910390f35b61020161048c565b60405161020e9190610d38565b60405180910390f35b610231600480360381019061022c9190610d7f565b610492565b60405161023f929190610dd1565b60405180910390f35b610262600480360381019061025d9190610c6d565b6104e2565b60405161026f9190610b67565b60405180910390f35b61028061054c565b60405161028d9190610bf4565b60405180910390f35b61029e610553565b6040516102ab9190610b67565b60405180910390f35b6102ce60048036038101906102c99190610c6d565b610566565b005b6102d8610587565b6040516102e59190610d38565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061036157506103608261058d565b5b9050919050565b6000806000838152602001908152602001600020600101549050919050565b61039082610368565b610399816105f7565b6103a3838361060b565b505050565b600360019054906101000a900460ff1681565b6103c36106eb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610430576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042790610e7d565b60405180910390fd5b61043a82826106f3565b5050565b60058060000154908060010154908060020154908060030154905084565b60046020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b60025481565b60096020528060005260406000206000915090508060000160009054906101000a900469ffffffffffffffffffff169080600001600a9054906101000a900469ffffffffffffffffffff16905082565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b600360009054906101000a900460ff1681565b61056f82610368565b610578816105f7565b61058283836106f3565b505050565b60015481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610608816106036106eb565b6107d4565b50565b61061582826104e2565b6106e757600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061068c6106eb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6106fd82826104e2565b156107d057600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506107756106eb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6107de82826104e2565b610855576107eb81610859565b6107f98360001c6020610886565b60405160200161080a929190610fa6565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084c919061102a565b60405180910390fd5b5050565b606061087f8273ffffffffffffffffffffffffffffffffffffffff16601460ff16610886565b9050919050565b606060006002836002610899919061107b565b6108a391906110bd565b67ffffffffffffffff8111156108bc576108bb6110f1565b5b6040519080825280601f01601f1916602001820160405280156108ee5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061092657610925611120565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061098a57610989611120565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026109ca919061107b565b6109d491906110bd565b90505b6001811115610a74577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610a1657610a15611120565b5b1a60f81b828281518110610a2d57610a2c611120565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610a6d9061114f565b90506109d7565b5060008414610ab8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaf906111c4565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610afc81610ac7565b8114610b0757600080fd5b50565b600081359050610b1981610af3565b92915050565b600060208284031215610b3557610b34610ac2565b5b6000610b4384828501610b0a565b91505092915050565b60008115159050919050565b610b6181610b4c565b82525050565b6000602082019050610b7c6000830184610b58565b92915050565b6000819050919050565b610b9581610b82565b8114610ba057600080fd5b50565b600081359050610bb281610b8c565b92915050565b600060208284031215610bce57610bcd610ac2565b5b6000610bdc84828501610ba3565b91505092915050565b610bee81610b82565b82525050565b6000602082019050610c096000830184610be5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c3a82610c0f565b9050919050565b610c4a81610c2f565b8114610c5557600080fd5b50565b600081359050610c6781610c41565b92915050565b60008060408385031215610c8457610c83610ac2565b5b6000610c9285828601610ba3565b9250506020610ca385828601610c58565b9150509250929050565b6000819050919050565b610cc081610cad565b82525050565b6000608082019050610cdb6000830187610cb7565b610ce86020830186610cb7565b610cf56040830185610cb7565b610d026060830184610cb7565b95945050505050565b600060208284031215610d2157610d20610ac2565b5b6000610d2f84828501610c58565b91505092915050565b6000602082019050610d4d6000830184610cb7565b92915050565b610d5c81610cad565b8114610d6757600080fd5b50565b600081359050610d7981610d53565b92915050565b600060208284031215610d9557610d94610ac2565b5b6000610da384828501610d6a565b91505092915050565b600069ffffffffffffffffffff82169050919050565b610dcb81610dac565b82525050565b6000604082019050610de66000830185610dc2565b610df36020830184610dc2565b9392505050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000610e67602f83610dfa565b9150610e7282610e0b565b604082019050919050565b60006020820190508181036000830152610e9681610e5a565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000610ede601783610e9d565b9150610ee982610ea8565b601782019050919050565b600081519050919050565b60005b83811015610f1d578082015181840152602081019050610f02565b60008484015250505050565b6000610f3482610ef4565b610f3e8185610e9d565b9350610f4e818560208601610eff565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000610f90601183610e9d565b9150610f9b82610f5a565b601182019050919050565b6000610fb182610ed1565b9150610fbd8285610f29565b9150610fc882610f83565b9150610fd48284610f29565b91508190509392505050565b6000601f19601f8301169050919050565b6000610ffc82610ef4565b6110068185610dfa565b9350611016818560208601610eff565b61101f81610fe0565b840191505092915050565b600060208201905081810360008301526110448184610ff1565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061108682610cad565b915061109183610cad565b925082820261109f81610cad565b915082820484148315176110b6576110b561104c565b5b5092915050565b60006110c882610cad565b91506110d383610cad565b92508282019050808211156110eb576110ea61104c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061115a82610cad565b91506000820361116d5761116c61104c565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006111ae602083610dfa565b91506111b982611178565b602082019050919050565b600060208201905081810360008301526111dd816111a1565b905091905056fea264697066735822122020d83047270f8cbda6dd04bae1924fcdf976d6d91537bb5bbc39299986f6b33664736f6c63430008110033";

type UtilitiesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UtilitiesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Utilities__factory extends ContractFactory {
  constructor(...args: UtilitiesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Utilities> {
    return super.deploy(overrides || {}) as Promise<Utilities>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Utilities {
    return super.attach(address) as Utilities;
  }
  override connect(signer: Signer): Utilities__factory {
    return super.connect(signer) as Utilities__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UtilitiesInterface {
    return new utils.Interface(_abi) as UtilitiesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Utilities {
    return new Contract(address, _abi, signerOrProvider) as Utilities;
  }
}
