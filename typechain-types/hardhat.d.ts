/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock__factory>;
    getContractFactory(
      name: "USDT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USDT__factory>;
    getContractFactory(
      name: "ParadoxToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParadoxToken__factory>;
    getContractFactory(
      name: "ParadoxTimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParadoxTimelock__factory>;
    getContractFactory(
      name: "ParadoxToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParadoxToken__factory>;
    getContractFactory(
      name: "Parapad",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Parapad__factory>;
    getContractFactory(
      name: "IPARA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPARA__factory>;
    getContractFactory(
      name: "StakePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakePool__factory>;
    getContractFactory(
      name: "Utilities",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Utilities__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Lock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lock>;
    getContractAt(
      name: "USDT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.USDT>;
    getContractAt(
      name: "ParadoxToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ParadoxToken>;
    getContractAt(
      name: "ParadoxTimelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ParadoxTimelock>;
    getContractAt(
      name: "ParadoxToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ParadoxToken>;
    getContractAt(
      name: "Parapad",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Parapad>;
    getContractAt(
      name: "IPARA",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPARA>;
    getContractAt(
      name: "StakePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakePool>;
    getContractAt(
      name: "Utilities",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Utilities>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
